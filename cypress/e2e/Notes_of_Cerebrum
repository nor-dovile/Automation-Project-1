beforeEach(() => {
    cy.visit('cypress/fixtures/registration_form_3.html')
})

/*
BONUS TASK: add visual tests for registration form 3
Task list:
* Test suite for visual tests for registration form 3 is already created
* Create tests to verify visual parts of the page:
    * radio buttons and its content*/

describe('Section 1: Visual tests', () => {
    it('Check that radio button list is correct', () => {
        cy.get('input[type="radio"]').should('have.length', 4)

         // Verify labels of the radio buttons
        cy.get('input[type="radio"]').next().eq(0).should('have.text','Daily')
        cy.get('input[type="radio"]').next().eq(1).should('have.text','Weekly')
        cy.get('input[type="radio"]').next().eq(2).should('have.text','Monthly')
        cy.get('input[type="radio"]').next().eq(3).should('have.text','Never')

        //Verify default state of radio buttons
        cy.get('input[type="radio"]').eq(0).should('not.be.checked')
        cy.get('input[type="radio"]').eq(1).should('not.be.checked')
        cy.get('input[type="radio"]').eq(2).should('not.be.checked')
        cy.get('input[type="radio"]').eq(3).should('not.be.checked')

        // Selecting one will remove selection from other radio button
        cy.get('input[type="radio"]').eq(0).check().should('be.checked')
        cy.get('input[type="radio"]').eq(1).check().should('be.checked')
        cy.get('input[type="radio"]').eq(0).should('not.be.checked')    
    })

    // * dropdown and dependencies between 2 dropdowns

    // it.only('Check that dropdown list is correct', () => {

    //     // Check lenght of Country dropdown
    //     cy.get('#country').children().should('have.length', 3)

    //     // Check that first element in the dropdown has text Spain
    //     cy.get('#country').find('option').eq(0).should('have.text', 'Spain')

    // })

    it.only('Should select cities based on selected countries', () => {
        // Select the first country
        //selectCitiesForCountry('Spain', ['', 'string:Malaga', 'string:Madrid', 'string:Valencia', 'string:Corralejo'])


        // check Spain
        const spainList = ['', 'string:Malaga', 'string:Madrid', 'string:Valencia', 'string:Corralejo']
        cy.get('#country').select('Spain')
        cy.get('#city option').should('have.length', spainList.length)
        cy.get('#city').find('option').eq(0).should('have.value', spainList[0])
        cy.get('#city').find('option').eq(1).should('have.value', 'string:Malaga')
        cy.get('#city').find('option').eq(2).should('have.value', 'string:Madrid')
        cy.get('#city').find('option').eq(3).should('have.value', 'string:Valencia')
        cy.get('#city').find('option').eq(4).should('have.value', 'string:Corralejo')

        // check Estonia
        cy.get('#country').select('Estonia')
        cy.get('#city option').should('have.length', ['', 'string:Tallinn', 'string:Haapsalu', 'string:Tartu'].length)
        cy.get('#city').find('option').eq(0).should('have.value', '')
        cy.get('#city').find('option').eq(1).should('have.value', 'string:Tallinn')
        cy.get('#city').find('option').eq(2).should('have.value', 'string:Haapsalu')
        cy.get('#city').find('option').eq(3).should('have.value', 'string:Tartu')
      
        // check Austria
        cy.get('#country').select('Austria')
        cy.get('#city option').should('have.length', ['', 'string:Vienna', 'string:Salzburg', 'string:Innsbruck'].length)
        cy.get('#city').find('option').eq(0).should('have.value', '')
        cy.get('#city').find('option').eq(1).should('have.value', 'string:Vienna')
        cy.get('#city').find('option').eq(2).should('have.value', 'string:Salzburg')
        cy.get('#city').find('option').eq(3).should('have.value', 'string:Innsbruck')

        // // Select the second country
        // selectCitiesForCountry('Estonia', ['', 'string:Tallinn', 'string:Haapsalu', 'string:Tartu'])
      
        // Select the third country
        // selectCitiesForCountry('Austria', ['', 'string:Vienna', 'string:Salzburg', 'string:Innsbruck'])
      })
})

// const options = [
//   { value: '', label: '' },
//   { value: 'string:spain', label: 'Spain' },
//   { value: 'string:austria', label: 'Austria'},
// ]

// options.length // 3
// options[2] // Austria object { value: 'string:austria', label: 'Austria'}
// options[2].label // Austria
// options[2].value // string:austria

// options.map(option => option.value)
// // ['', 'string:spain', 'string:austria']


// // map explanation
// const numbers = [ 1, 2, 3 ]
// const result = numbers.map(number => number + 1)
// // result = [2, 3, 4]


// This function is exactly the same as the tests with countries and cities above

function selectCitiesForCountry(country, expectedCities) {
    cy.get('#country').select(country)
    cy.get('#city option').should('have.length', expectedCities.length)
  
    cy.get('#city').find('option').then(options => {
        const actual = [...options].map(option => option.value)
        expect(actual).to.deep.eq(expectedCities)
    })
  }